openapi: 3.0.3
info:
  title: API Documentation
  version: 1.0.0
servers:
  - url: http://localhost:{port}/{base-path}
    description: Free NOW Service provider API
    variables:
      port: 
        enum:
          - '80'
          - '8080'
        default: '8080'
      base-path: 
        default: v1
tags:
  - name: Driver
    
paths:
  /drivers:
    get:
      tags:
        - Driver
      operationId: findDrivers
      parameters:
        - name: status
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/OnlineStatus'
        - name: nextId
          in: query
          required: false
          description: Next Driver ID from whom to start ordered list
          schema:
            type: integer
            format: int64

      responses:
        200:
          description: List of drivers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverList'
        default:
          $ref: '#/components/responses/error'

  /driver:
    post:
      tags:
        - Driver
      operationId: createDriver
      requestBody:
        description: Create new Driver
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDriver'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
        default:
          $ref: '#/components/responses/error'

  /driver/{id}:
    get:
      tags:
        - Driver
      operationId: getDriver
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
        default:
          $ref: '#/components/responses/error'

    delete:
      tags:
        - Driver
      description: Delete existent Driver by ID
      operationId: deleteDriver
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        204:
          description: Driver deleted
        default:
          $ref: '#/components/responses/error'

    put:
      tags:
        - Driver
      operationId: updateLocation
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeoCoordinate'
      responses:
        202:
          description: Location updated successfully
        default:
          $ref: '#/components/responses/error'


components:

  responses:
    error:
      description: unexpected error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  parameters:
    id:
      name: id
      in: path
      required: true
      description: Driver ID
      schema:
        type: integer
        format: int64
        minimum: 1

  schemas:

    DriverList:
      title: List of selected drivers
      type: object
      required:
        - total
        - drivers
      properties:
        total:
          type: integer
          format: int32
        next:
          description: Next ID of a Driver not included into list
          type: integer
          format: int64
        drivers:
          type: array
          default: []
          items:
            $ref: '#/components/schemas/Driver'

    Driver:
      title: Driver entity
      type: object
      required:
        - id
        - username
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        coordinate:
          $ref: '#/components/schemas/GeoCoordinate'
        online_status:
          $ref: '#/components/schemas/OnlineStatus'

    CreateDriver:
      title: Create new Driver entity
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 5
          maxLength: 255
        password:
          type: string
          description: |
            The password length must be greater than or equal to 8 |
            The password length must be less than 64 |
            The password must contain one or more uppercase characters |
            The password must contain one or more lowercase characters |
            The password must contain one or more numeric values |
            The password must contain one or more special characters
          pattern: '(?=^.{8,64}$)(?=.*\d)(?=.*[!@#$%^&*]+)(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$'

    OnlineStatus:
      title: Driver online status
      type: string
      enum:
        - ONLINE
        - OFFLINE

    GeoCoordinate:
      title: Geo coordinates of a Driver or a Car
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: double
          minimum: -90.
          maximum: 90.
        longitude:
          type: number
          format: double
          minimum: -180.
          maximum: 180.

    Address:
      title: Address location
      type: object
      required:
        - first_line
        - post_code
        - city
      properties:
        first_line:
          type: string
        second_line:
          type: string
        post_code:
          type: string
        city:
          type: string
        country_code:
          type: string
          default: 'DE'

    Engine:
      title: Car engine type
      type: string
      enum:
        - ELECTRIC
        - GAS

    Manufacturer:
      title: Car manufacturer
      type: object
      required:
        - address
        - name
      properties:
        name:
          type: string
        address:
          $ref: '#/components/schemas/Address'

    Car:
      title: Car entity
      required:
        - license_plate
        - seat_count
        - engine_type
      type: object
      properties:
        license_plate:
          type: string
          description: Licence plate installed on a car
          example: BMW555
        seat_count:
          type: integer
          format: int32
        engine_type:
          $ref: '#/components/schemas/Engine'
        convertible:
          type: boolean
        rating:
          type: number
          format: float

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

