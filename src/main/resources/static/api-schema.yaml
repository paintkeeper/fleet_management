openapi: 3.0.3

info:
  title: Free Now Test task API
  version: 1.0.0
  license:
    name: GPLv3
    url: https://www.gnu.org/licenses/gpl-3.0.html
  contact:
    name: Andrei Alekseenko
    email: engelier@gmx.de

servers:
  - url: http://localhost:{port}/{base-path}
    description: Free NOW Service provider API
    variables:
      port:
        enum:
          - '8080'
        default: '8080'
      base-path:
        default: v1

tags:
  - name: Driver
  - name: Car
  - name: Auth

paths:

  /drivers:

    get:
      tags:
        - Driver
      operationId: findDrivers
      parameters:
        - $ref: '#/components/parameters/drivers_query'
      responses:
        200:
          description: List of drivers
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DriverList'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'

  /driver:

    post:
      tags:
        - Driver
      operationId: createDriver
      requestBody:
        description: Create new Driver
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDriver'
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
        400:
          $ref: '#/components/responses/ConstraintViolation'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'

  /driver/{id}:

    get:
      tags:
        - Driver
      operationId: getDriver
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'

    delete:
      tags:
        - Driver
      description: Delete existent Driver by ID
      operationId: deleteDriver
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        204:
          description: Driver deleted
        400:
          $ref: '#/components/responses/ConstraintViolation'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'

    put:
      tags:
        - Driver
      operationId: updateLocation
      parameters:
        - $ref: '#/components/parameters/id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GeoLocation'
      responses:
        202:
          description: Location updated successfully
        400:
          $ref: '#/components/responses/ConstraintViolation'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'

    patch:
      tags:
        - Driver
      operationId: mergeDriver
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDriver'
      parameters:
        - $ref: '#/components/parameters/id'
      responses:
        202:
          description: Driver successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Driver'


  /driver/{id}/{carId}:

    put:
      tags:
        - Driver
      operationId: assignCar
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/carId'
      responses:
        202:
          description: Car successfully assigned
        400:
          $ref: '#/components/responses/ConstraintViolation'
        401:
          $ref: '#/components/responses/Unauthorized'
        403:
          $ref: '#/components/responses/CarAlreadyInUse'
        404:
          $ref: '#/components/responses/NotFound'
        406:
          $ref: '#/components/responses/ValidationError'
        default:
          $ref: '#/components/responses/Unexpected'

    delete:
      tags:
        - Driver
      operationId: unassignCar
      parameters:
        - $ref: '#/components/parameters/id'
        - $ref: '#/components/parameters/carId'
      responses:
        202:
          description: Car removed successfully
        400:
          $ref: '#/components/responses/ConstraintViolation'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'

  /car:

    post:
      tags:
        - Car
      operationId: addCar
      requestBody:
        description: Add Car to fleet
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Car'
      responses:
        201:
          description: Car inserted to fleet database
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        400:
          $ref: '#/components/responses/ConstraintViolation'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'

  /car/{carId}:

    delete:
      tags:
        - Car
      description: Remove Car from fleet
      operationId: removeCar
      parameters:
        - $ref: '#/components/parameters/carId'
      responses:
        204:
          description: Car removed from fleet
        400:
          $ref: '#/components/responses/ConstraintViolation'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'

    patch:
      tags:
        - Car
      description: Update Car parameter values
      operationId: modifyCar
      parameters:
        - $ref: '#/components/parameters/carId'
      requestBody:
        description: Modify Car
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCar'
      responses:
        202:
          description: Car information successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        400:
          $ref: '#/components/responses/ConstraintViolation'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'

    get:
      tags:
        - Car
      description: Retrieve Car information
      operationId: carInfo
      parameters:
        - $ref: '#/components/parameters/carId'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'

  /cars:

    get:
      tags:
        - Car
      operationId: findCars
      parameters:
        - $ref: '#/components/parameters/cars_query'
      responses:
        200:
          description: List of cars
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CarList'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        406:
          $ref: '#/components/responses/ValidationError'
        default:
          $ref: '#/components/responses/Unexpected'

  /token:

    post:
      tags:
        - Auth
      operationId: obtainToken
      parameters:
        - in: header
          name: referer
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthRequest'
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        401:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'
        default:
          $ref: '#/components/responses/Unexpected'

components:

  responses:

    Unexpected:
      description: Unexpected error.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ConstraintViolation:
      description: Some constraints are violated.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFound:
      description: Could not find entity with id.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    Unauthorized:
      description: Unauthorized.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ValidationError:
      description: Failed to validate business rules
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    CarAlreadyInUse:
      description: A car can be selected by exactly one ONLINE Driver.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

  parameters:

    id:
      name: id
      in: path
      required: true
      description: Driver ID
      schema:
        type: string
        format: uuid

    carId:
      name: carId
      in: path
      required: true
      description: Car ID
      schema:
        type: string
        format: uuid

    drivers_query:
      name: drivers_query
      in: query
      description: Driver search parameters
      schema:
        type: object
        properties:
          online_status:
            $ref: '#/components/schemas/OnlineStatus'
          username:
            type: string
          deleted:
            type: boolean
          password_expired:
            type: boolean
          license_plate:
            type: string
          rating_low_bound:
            type: number
            format: double
          rating_high_bound:
            type: number
            format: double
          vin:
            type: string
          manufacturer:
            type: string
          seat_count:
            type: integer
            format: int32
          model:
            type: string
          engine_type:
            $ref: '#/components/schemas/Engine'

    cars_query:
      name: cars_query
      in: query
      description: Car search parameters
      schema:
        type: object
        properties:
          license_plate:
            type: string
          rating_low_bound:
            type: number
            format: double
          rating_high_bound:
            type: number
            format: double
          vin:
            type: string
          manufacturer:
            type: string
          seat_count:
            type: integer
            format: int32
          model:
            type: string
          engine_type:
            $ref: '#/components/schemas/Engine'


  schemas:

    DriverList:
      title: List of selected drivers
      type: object
      required:
        - drivers
      properties:
        drivers:
          type: array
          default: []
          items:
            $ref: '#/components/schemas/Driver'

    Driver:
      title: Driver entity
      type: object
      required:
        - id
        - username
      properties:
        id:
          type: string
          format: uuid
        date_created:
          type: string
          format: date-time
        username:
          type: string
        coordinate:
          $ref: '#/components/schemas/GeoLocation'
        online_status:
          $ref: '#/components/schemas/OnlineStatus'
        car:
          $ref: '#/components/schemas/Car'

    CreateDriver:
      title: Create new Driver entity
      type: object
      required:
        - username
        - password
      properties:
        username:
          type: string
          minLength: 5
          maxLength: 64
          example: name@example.com
        password:
          type: string
          example: V3Ry$tr0nGP@$$w0rd
          description: |
            The password length must be greater than or equal to 8 |
            The password length must be less than 64 |
            The password must contain one or more uppercase characters |
            The password must contain one or more lowercase characters |
            The password must contain one or more numeric values |
            The password must contain one or more special characters
          pattern: '(?=^.{8,64}$)(?=.*\d)(?=.*[!@#$%^&*]+)(?![.\n])(?=.*[A-Z])(?=.*[a-z]).*$'

    UpdateDriver:
      title: Update Driver parameters
      type: object
      properties:
        online_status:
          $ref: '#/components/schemas/OnlineStatus'

    OnlineStatus:
      title: Driver online status
      type: string
      example: ONLINE
      enum:
        - ONLINE
        - OFFLINE

    GeoLocation:
      title: Geo coordinates of a Driver
      required:
        - latitude
        - longitude
      properties:
        latitude:
          type: number
          format: double
          minimum: -90.
          maximum: 90.
        longitude:
          type: number
          format: double
          minimum: -180.
          maximum: 180.

    Engine:
      title: Car engine type
      type: string
      example: OIL
      enum:
        - OIL
        - ELECTRIC
        - GAS

    Manufacturer:
      title: Car manufacturer
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
        date_created:
          type: string
          format: date-time
        name:
          type: string
          example: BMW

    Car:
      title: Car entity
      required:
        - vin
        - manufacturer
        - model
        - license_plate
        - seat_count
        - engine_type
        - convertible
      type: object
      properties:
        id:
          type: string
          format: uuid
        date_created:
          type: string
          format: date-time
        vin:
          description: VIN number of car body
          type: string
          example: WBAFG01080L328038
          minLength: 6
          maxLength: 17
        manufacturer:
          type: string
          example: BMW
        model:
          type: string
          example: X5
        license_plate:
          type: string
          description: Licence plate installed on a car
          example: HH45D
        seat_count:
          type: integer
          format: int32
          example: 4
        engine_type:
          $ref: '#/components/schemas/Engine'
        convertible:
          type: boolean
          example: false
        rating:
          type: number
          format: double
          example: 5.0

    UpdateCar:
      title: Update Car parameters
      type: object
      properties:
        manufacturer:
          type: string
        model:
          type: string
          example: X5
        license_plate:
          type: string
          description: Licence plate installed on a car
          example: HH99A
        seat_count:
          type: integer
          format: int32
          example: 4
        engine_type:
          $ref: '#/components/schemas/Engine'
        convertible:
          type: boolean
          example: false
        rating:
          type: number
          format: double
          example: 7.0

    CarList:
      title: List of selected cars
      type: object
      required:
        - cars
      properties:
        cars:
          type: array
          default: []
          items:
            $ref: '#/components/schemas/Car'

    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string

    AuthRequest:
      type: object
      required:
        - client_id
        - code
        - state
      properties:
        client_id:
          type: string
        code:
          type: string
        state:
          type: string
        scope:
          type: string
          default: user

    AuthResponse:
      type: object
      required:
        - access_token
        - token_type
      properties:
        access_token:
          type: string
        token_type:
          type: string
        scope:
          type: string